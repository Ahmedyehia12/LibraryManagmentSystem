name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Print Workspace Path
        run: echo ${{ github.workspace }}

      - name: Verify Files
        run: ls -R ${{ github.workspace }}

      - name: Build Docker Image
        run: docker build -t library-system-final:latest .

      - name: Verify Docker Credentials
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "DOCKER_USERNAME=${DOCKER_USERNAME}"
          if [ -z "${DOCKER_PASSWORD}" ]; then
              echo "DOCKER_PASSWORD is empty"
              exit 1
          else
              echo "DOCKER_PASSWORD is set"
          fi

      - name: Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker tag library-system-final:latest $DOCKER_USERNAME/library-system-final:latest
          docker push $DOCKER_USERNAME/library-system-final:latest

      - name: Deploy to EKS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-central-1'
          EKS_CLUSTER_NAME: 'team5-cluster'
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
          kubectl delete deployment library-management-deployment || true
          kubectl delete svc library-management-service || true
          kubectl apply -f library-management-deployment.yaml
          kubectl apply -f service.yaml

      - name: Get Load Balancer IP
        run: |
          sleep 60
          loadBalancerIP=$(kubectl get svc library-management-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          echo "Load Balancer IP: $loadBalancerIP"

    outputs:
      load_balancer_ip:
        description: 'The IP of the Load Balancer'
        value: ${{ steps.get_load_balancer_ip.outputs.load_balancer_ip }}

    cleanup:
      runs-on: ubuntu-latest
      steps:
        - name: Clean Workspace
          run: rm -rf ${{ github.workspace }}
